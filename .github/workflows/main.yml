name: 🔁 Sync upstream Releases via API

on:
  schedule:
    - cron: '0 2 * * *'      # 每天 UTC 2:00 同步
  workflow_dispatch:         # 手动触发

permissions:
  contents: write            # 创建 Release 需要写内容权限
  packages: read             # 读取 assets
  id-token: write            # 如果你用 OIDC 获取令牌（可选）

jobs:
  sync_releases:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout (仅用于 github-script 上下文)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Sync Releases from upstream
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.WORKFLOW_TOKEN }}  # 或直接使用 GITHUB_TOKEN（带写权限）
          script: |
            const upstreamOwner = 'homuler';
            const upstreamRepo  = 'MediaPipeUnityPlugin';
            const myOwner       = context.repo.owner;
            const myRepo        = context.repo.repo;

            // 1. 获取上游所有 releases
            const upstreamReleases = await github.rest.repos.listReleases({
              owner: upstreamOwner,
              repo: upstreamRepo,
              per_page: 100
            });

            for (const rel of upstreamReleases.data) {
              // 2. 检查目标仓库是否已有该 tagName 的 Release
              let exists;
              try {
                await github.rest.repos.getReleaseByTag({
                  owner: myOwner,
                  repo: myRepo,
                  tag: rel.tag_name
                });
                exists = true;
              } catch (e) {
                exists = false;
              }

              if (!exists) {
                // 3. 创建 Release
                const created = await github.rest.repos.createRelease({
                  owner: myOwner,
                  repo: myRepo,
                  tag_name: rel.tag_name,
                  name: rel.name,
                  body: rel.body,
                  draft: rel.draft,
                  prerelease: rel.prerelease
                });
                console.log(`Created release ${rel.tag_name}`);

                // 4. 复制 assets
                const assets = await github.rest.repos.listReleaseAssets({
                  owner: upstreamOwner,
                  repo: upstreamRepo,
                  release_id: rel.id
                });
                for (const asset of assets.data) {
                  // 下载二进制数据
                  const download = await github.request({
                    url: asset.url,
                    headers: { accept: 'application/octet-stream' }
                  });
                  // 上传到新 Release
                  await github.rest.repos.uploadReleaseAsset({
                    owner: myOwner,
                    repo: myRepo,
                    release_id: created.data.id,
                    name: asset.name,
                    data: download.data
                  });
                  console.log(`  + asset: ${asset.name}`);
                }
              } else {
                console.log(`Release ${rel.tag_name} already exists, skipping.`);
              }
            }
